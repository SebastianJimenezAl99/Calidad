name: CI/CD Pipeline
run-name: ${{ github.actor }} ejecutando pipeline CI/CD üöÄ

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Linting
  lint:
    name: üîç An√°lisis de C√≥digo
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js (para proyectos JS/TS)
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python (para proyectos Python)
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar dependencias Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: npm ci
        
      - name: Instalar dependencias Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Ejecutar ESLint (Node.js)
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: npm run lint
        
      - name: Ejecutar Flake8 (Python)
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        run: flake8 src/ --max-line-length=88

  # Job 2: Tests con Coverage
  test:
    name: üß™ Pruebas con Coverage
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar dependencias Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: npm ci
        
      - name: Instalar dependencias Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Ejecutar tests Node.js con coverage
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: |
          npm test -- --coverage --coverageReporters=lcov --coverageThreshold='{"global":{"lines":90,"functions":90,"branches":90,"statements":90}}'
          
      - name: Ejecutar tests Python con coverage
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        run: |
          pytest --cov=src --cov-report=lcov --cov-fail-under=90
          
      - name: Verificar threshold de coverage
        uses: tluijken/code-coverage-threshold@v1
        with:
          coverage-file: coverage/lcov.info
          minimum-coverage: 90
          
      - name: Subir reporte de coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            *.lcov
            coverage.xml
          retention-days: 30

  # Job 3: Build
  build:
    name: üèóÔ∏è Empaquetado
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar dependencias y build Node.js
        if: contains(github.repository, 'node') || contains(github.repository, 'js')
        run: |
          npm ci
          npm run build
          
      - name: Crear paquete Python
        if: contains(github.repository, 'python') || contains(github.repository, 'py')
        run: |
          python -m pip install --upgrade pip build
          python -m build
          
      - name: Comprimir artefactos
        run: |
          if [ -d "dist" ]; then
            tar -czf app-build.tar.gz dist/
          elif [ -d "build" ]; then
            tar -czf app-build.tar.gz build/
          else
            tar -czf app-build.tar.gz src/
          fi
          
      - name: Subir paquete
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: app-build.tar.gz
          retention-days: 30

  # Job 4: Docker
  docker:
    name: üê≥ Docker Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: needs.test.result == 'success'
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Descargar artefactos de build
        uses: actions/download-artifact@v4
        with:
          name: app-package
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login a Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extraer metadatos
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: Build y push imagen Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Validar contenedor
        run: |
          # Ejecutar el contenedor para validaci√≥n
          docker run --rm -d --name test-container ${{ steps.meta.outputs.tags }}
          sleep 10
          
          # Verificar que el contenedor est√° corriendo
          if docker ps | grep test-container; then
            echo "‚úÖ Contenedor ejecut√°ndose correctamente"
            docker stop test-container
          else
            echo "‚ùå Error: Contenedor no est√° corriendo"
            exit 1
          fi